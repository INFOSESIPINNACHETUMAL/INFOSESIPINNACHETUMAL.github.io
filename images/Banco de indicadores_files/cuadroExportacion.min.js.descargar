function cuadroExportacionComponente() {
    this.About = function() {
        this.fecha = "27.04.2017", this.version = "1.1.1"
    }, this.IniciaComponente = function(t, a, r, o, i, s, n, c, e, d, l) {
        var b = this;
        configura(null).init();
        var p = document.getElementById(d);
        p.innerHTML = "";
        var f = C_token,
            u = -1 < window.location.href.indexOf("http://internetpwww.inegi.org.mx/app/") || -1 < window.location.href.indexOf("http://w-webinterpre1/app/") ? C_direccionServicio_V + "_" + API_V : C_direccionServicio_V + "_" + API_V,
            m = "",
            m = ' <div id="divLoad' + d + '" style="width:100% !important;" class="col-xs-12"> <img src="img/cargando.gif"   style="display: block; margin: 0 auto; " /> </div>';
        p.innerHTML = m;
        var m = "",
            g = null != l ? l : "",
            g = -1 != u.toUpperCase().indexOf("V1_2") ? "0" == g ? "3" : g : "3" == g ? "0" : g;
        (m = "/ExportacionBancoInformacion/" + t + "/" + a + "/" + r + "/" + o + "/" + i + "/" + s + "/" + n + "/" + c + "/false/" + e + "/" + g + "/json/" + f + "?callback=?").length < 300 ? $.getJSON(u + m, null, function(e) {
            b.PintaComponente(e, t, a, r, o, i, s, n, c, d, g)
        }) : (f = {
            indicadores: t,
            areasGeograficas: a,
            idioma: r,
            casoExportacion: o,
            orden: i,
            ordenaPeriodo: s,
            fechaInicio: n,
            fechaFin: c,
            mostrarDecimales: "false",
            mostrarEstadistico: e,
            tematica: g,
            formato: "json",
            token: f
        }, f = JSON.stringify(f), $.ajax({
            method: "POST",
            url: u + "/API.svc/ExportacionBancoInformacion",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: f,
            processData: !0,
            success: function(e) {
                b.PintaComponente(e, t, a, r, o, i, s, n, c, d, g)
            },
            error: function(e, t, a) {
                console.log(t, a)
            }
        }))
    }, this.NombresIngles = function(e, t) {
        var a = "";
        if ("en" == t) switch (e) {
            case "Indicadores":
                a = "Indicators";
                break;
            case "Areas Geograficas":
                a = "Geographic Area";
                break;
            case "Periodos":
                a = "Periods";
                break;
            default:
                a = e
        } else a = e;
        return a
    }, this.PintaComponente = function(e, t, a, r, o, i, s, n, c, d, l) {
        var b = document.getElementById(d),
            p = "";
        p += "<div class= 'table-responsive'>", p += "<table class='table table-small-font table-striped sticky-header' style='font-size:14px !important;'>";
        var f = !1;
        if (null == e.ErrorCode) {
            for (var u = 0; u < e.length; u++) {
                0 == u && (p += "<thead>"), 1 == u && (p += "<tbody>"), p += "<tr>";
                for (var m = e[u].listaCeldas, g = 0; g < m.length; g++)
                    if (0 == u) {
                        p += '<th style="border-bottom: #c8c8c8 1px solid!Important; border-left: #c8c8c8 1px solid!Important;  background-color: #e0e0e0!Important;vertical-align: middle; text-align: center; height: 25px; font-weight: bold">';
                        var h, v = "",
                            k = "";
                        if (1 < (N = m[g].valor.split(">")).length ? (k = N[N.length - 1], v = m[g].valor.replace(k, "").replace("_", " "), 0 == g && (v = v.replace("Areas", "Área").replace("Geograficas", "geográficas")), p += "en" == r ? '<a title="' + v + '"><b>Thematic route</b></a><br>' + k : '<a title="' + this.TrataRutaTematica(v) + '"><b>Ruta temática</b></a><br>' + k) : (h = m[g].valor.replace("_", " "), 0 == g && (h = h.replace("Areas", "Área").replace("Geograficas", "geográfica")), p += h), null != m[g].siglas)
                            for (var C = 0; C < m[g].siglas.length; C++) p += '&nbsp;<a title="' + m[g].siglas[C].descripcion + '"><sup><b>' + m[g].siglas[C].letra + "/</b></sup></a>";
                        "" != m[g].unidad && "." != m[g].unidad && (p += "<br>(" + (null !== m[g].factor && "" !== m[g].factor ? m[g].factor + ("es" === r ? " de " : " of ") : "") + m[g].unidad + ")"), "" != m[g].frecuencia && (p += "<br>" + m[g].frecuencia), p += "</th>"
                    } else if (0 == g) {
                    p += '<td style="border-bottom: #c8c8c8 1px solid!Important; border-left: #c8c8c8 1px solid!Important;  background-color: #e0e0e0!Important;vertical-align: middle; text-align: left; height: 25px; font-weight: bold">';
                    var N, v = "",
                        k = "";
                    if (1 < (N = m[g].valor.split(">")).length ? (k = N[N.length - 1], v = m[g].valor.replace(k, ""), p += '<a title="' + this.TrataRutaTematica(v) + '"><b>Ruta temática</b></a><br>' + k) : p += m[g].valor, null != m[g].siglas)
                        for (C = 0; C < m[g].siglas.length; C++) p += '&nbsp;<a title="' + m[g].siglas[C].descripcion + '"> <sup><b>' + m[g].siglas[C].letra + "/</b></sup></a>";
                        "" == m[g].unidad && "." == m[g].unidad && "" == m[g].frecuencia || (p += "<br>" + m[g].unidad + "<br>" + m[g].frecuencia), p += "</td>", "Estadísticos" != m[g].valor && "Statistical" != m[g].valor || (f = !0)
                } else p += f ? '<td style="border-bottom: #c8c8c8 1px solid!Important; border-left: #c8c8c8 1px solid!Important; text-align:right !Important; background-color:#e0e0e0!Important">' : '<td style="border-bottom: #c8c8c8 1px solid!Important; border-left: #c8c8c8 1px solid!Important; text-align:right !Important;">', p += this.traeExcepcionesV2(m[g].valor, m[g].excepcion), p += "</td>";
                p += "</tr>", 0 == u && (p += "</thead>"), u == e.length - 1 && (p += "</tbody>")
            }
            p += "</table>", p += "</div>", p += "<div id='divNotasExporta" + d + "'></div>", b.innerHTML = p;
            b = findBootstrapEnvironment();
            "xs" !== b && "sm" !== b && $(function() {
                $(".table-responsive").responsiveTable({
                    pattern: "priority-columns",
                    stickyTableHeader: !0,
                    addDisplayAllBtn: !1,
                    addFocusBtn: !1
                })
            }), this.ConsultaNotasFuentes(t, a, r, o, i, n, c, d, l)
        } else x(d), console.log(e)
    };
    var v = [],
        a = [];
    function x(e) {
        e = document.getElementById("divLoad" + e);
        null != e && (e.style.display = "none")
    }
    this.traeExcepcionesV2 = function(e, t) {
        return "" !== t && -1 == a.indexOf(e) && (a.push(e), v.push(e + ": " + t)), e
    }, this.traeExcepciones = function(e) {
        var t = "";
        switch (e) {
            case "No cuenta con elementos para responder":
                t = "-";
                break;
            case "Variación mayor al 1000%":
                t = "-o-";
                break;
            case "Alto":
                t = "A";
                break;
            case "Grado de rezago social alto":
                t = "Alto";
                break;
            case "Bajo":
                t = "B";
                break;
            case "Grado de rezago social bajo":
                t = "Bajo";
                break;
            case "Cifra no publicable por el principio de confidencialidad":
            case "Confidencial":
                t = "C";
                break;
            case "Cociente no definido":
                t = "CND";
                break;
            case "Productivos no es posible presentar el dato para pastos en las variables correspondientes":
                t = "Efectos Co";
                break;
            case "Indefinido":
                t = "I";
                break;
            case "Medio":
                t = "M";
                break;
            case "Muy alto":
                t = "MA";
                break;
            case "Muy bajo":
                t = "MB";
                break;
            case "Grado de rezago social medio":
                t = "Medio";
                break;
            case "Muestra Insuficiente":
                t = "MI";
                break;
            case "Grado de rezago social muy alto":
                t = "Muy alto";
                break;
            case "Grado de rezago social muy bajo":
                t = "Muy bajo";
                break;
            case "No aplica":
                t = "NA";
                break;
            case "No calculable":
                t = "NC";
                break;
            case "No comparable":
                t = "NCO";
                break;
            case "No disponible":
                t = "ND";
                break;
            case "No especificado":
                t = "NE";
                break;
            case "No existe distrito de riego":
                t = "NEDR";
                break;
            case "No realiza, no tiene y/o no utiliza ninguna de las opciones enlistadas":
                t = "NO";
                break;
            case "La variable denominador es igual a cero":
                t = "NP";
                break;
            case "No Presenta Registro":
                t = "NPR";
                break;
            case "No significativo":
                t = "NS";
                break;
            case "No se captó":
                t = "NSC";
                break;
            case "Sin cotización":
                t = "SC";
                break;
            case "Sin Sentido Económico":
                t = "SSE";
                break;
            case "Valor implícito para mano de obra total en los limites de confianza y coeficiente de variación":
                t = "Valor Impl"
        }
        return "" == t ? t = e : -1 == a.indexOf(t) && (a.push(t), v.push(t + ": " + e)), t
    }, this.TrataRutaTematica = function(e) {
        for (var t = "", a = e.trim().split(">"), r = 0; r < a.length; ++r) {
            if (0 < r) {
                t += "&#10;";
                for (var o = 0; o < r; ++o) t += "&#160;&#160;"
            }
            t += a[r].toString().trim()
        }
        return t
    }, this.ConsultaNotasFuentes = function(e, t, a, r, o, i, s, n, c) {
        var d, l = this,
            b = C_token,
            p = C_direccionServicio_V + "_" + API_V;
        c = -1 != p.toUpperCase().indexOf("V1_2") ? "0" == c ? "3" : c : "3" == c ? "0" : c, (d = "/NotasYFuentesExportacion/" + e + "/" + t + "/" + a + "/" + i + "/" + s + "/" + c + "/json/" + b + " ? callback =? ").length < 300 ? $.getJSON(p + d, null, function(e) {
            l.PintaNotasFuentes(e, n, a, c)
        }) : (b = {
            indicadores: e,
            areasGeograficas: t,
            idioma: a,
            fechaInicio: i,
            fechaFin: s,
            tematica: c,
            formato: "json",
            token: b
        }, b = JSON.stringify(b), $.ajax({
            method: "POST",
            url: p + "/API.svc/NotasYFuentesExportacion",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: b,
            processData: !0,
            success: function(e) {
                l.PintaNotasFuentes(e, n, a, c)
            },
            error: function(e, t, a) {
                console.log(t, a)
            }
        }))
    }, this.PintaNotasFuentes = function(e, t, a, r) {
        if (null == e.ErrorCode) {
            var o, i, s, n, c = "",
                d = "",
                l = "",
                b = "",
                p = "",
                f = "";
            "0" !== r.toString() && (n = s = i = o = "");
            for (var u = "", m = "es" === a ? "A partir de " : "From ", g = 0; g < e.length; g++)
                if ("0" !== r.toString()) switch (e[g].tipo) {
                    case "NOTA":
                        d += "<tr><td><b>" + e[g].letra + "/</b>&nbsp;" + e[g].nota + "</td></tr>";
                        break;
                    case "Oportuna":
                        l += "<tr><td><b>" + e[g].letra + "/</b>&nbsp;" + m + e[g].periodos + "</td></tr>";
                        break;
                    case "Preliminar":
                        b += "<tr><td><b>" + e[g].letra + "/</b>&nbsp;" + m + e[g].periodos + "</td></tr>";
                        break;
                    case "Estimada":
                        p += "<tr><td><b>" + e[g].letra + "/</b>&nbsp;" + m + e[g].periodos + "</td></tr>";
                        break;
                    case "Revisada":
                        f += "<tr><td><b>" + e[g].letra + "/</b>&nbsp;" + m + e[g].periodos + "</td></tr>";
                        break;
                    case "Observaciones":
                        o += "<tr><td><b>" + e[g].letra + "/</b>&nbsp;" + m + e[g].periodos + "</td></tr>";
                        break;
                    case "Corregida":
                        i += "<tr><td><b>" + e[g].letra + "/</b>&nbsp;" + m + e[g].periodos + "</td></tr>";
                        break;
                    case "Ajustada":
                        s += "<tr><td><b>" + e[g].letra + "/</b>&nbsp;" + m + e[g].periodos + "</td></tr>";
                        break;
                    case "Actualizada":
                        n += "<tr><td><b>" + e[g].letra + "/</b>&nbsp;" + m + e[g].periodos + "</td></tr>";
                        break;
                    case "FUENTE":
                        u += "<tr><td><b>" + e[g].letra + "/</b>&nbsp;" + e[g].nota + "</td></tr>"
                } else switch (e[g].tipo) {
                    case "NOTA":
                        d += "<tr><td><b>" + e[g].letra + "/</b>&nbsp;" + e[g].nota + "</td></tr>";
                        break;
                    case "Cifras oportunas":
                        l += "<tr><td><b>" + e[g].letra + "/</b>&nbsp;" + e[g].nota + "</td></tr>";
                        break;
                    case "Cifras preliminares":
                        b += "<tr><td><b>" + e[g].letra + "/</b>&nbsp;" + e[g].nota + "</td></tr>";
                        break;
                    case "Cifras estimadas":
                        p += "<tr><td><b>" + e[g].letra + "/</b>&nbsp;" + e[g].nota + "</td></tr>";
                        break;
                    case "Cifras revisadas":
                        f += "<tr><td><b>" + e[g].letra + "/</b>&nbsp;" + e[g].nota + "</td></tr>";
                        break;
                    case "FUENTE":
                        u += "<tr><td><b>" + e[g].letra + "/</b>&nbsp;" + e[g].nota + "</td></tr>"
                }
            if (c += "<table>", "" != d && (c += "<tr><td><b>" + ("en" == a ? "Notes:" : "Notas:") + "</b></td><tr>", c += d), 0 < v.length) {
                v.sort();
                for (var h = 0; h < v.length; h++) c += "<tr><td><b>" + v[h] + "</b></td><tr>"
            }
            "" != l && (c += "es" === a ? "<tr><td><b>Cifras Oportunas:</b></td><tr>" : "<tr><td><b>Timely figures:</b></td><tr>", c += l), "" != b && (c += "es" === a ? "<tr><td><b>Cifras Preliminares:</b></td><tr>" : "<tr><td><b>Preliminar figures:</b></td><tr>", c += b), "" != f && (c += "es" === a ? "<tr><td><b>Cifras Revisadas:</b></td><tr>" : "<tr><td><b>Revised figures:</b></td><tr>", c += f), "" != p && (c += "es" === a ? "<tr><td><b>Cifras Estimadas:</b></td><tr>" : "<tr><td><b>Estimated figures:</b></td><tr>", c += p), "0" !== r.toString() && ("" != o && (c += "<tr><td><b>Cifras con Observaciones:</b></td><tr>", c += o), "" != i && (c += "<tr><td><b>Cifras Corregidas:</b></td><tr>", c += i), "" != s && (c += "<tr><td><b>Cifras Ajustadas:</b></td><tr>", c += s), "" != n && (c += "<tr><td><b>Cifras Actualizadas:</b></td><tr>", c += n)), "" != u && (c += "<tr><td><b>" + ("en" == a ? "Sources:" : "Fuentes:") + "</b></td><tr>", c += u), c += "</table>", document.getElementById("divNotasExporta" + t) !== null ? document.getElementById("divNotasExporta" + t).innerHTML = c : '', x(t)
        } else x(t), console.log(e)
    }
}
function findBootstrapEnvironment() {
    var e = ["xs", "sm", "md", "lg"];
    $el = $("<div>"), $el.appendTo($("body"));
    for (var t = e.length - 1; 0 <= t; t--) {
        var a = e[t];
        if ($el.addClass("hidden-" + a), $el.is(":hidden")) return $el.remove(), a
    }
}
cuadroExportacionComponente.prototype.CargaParametros = function(e, t, a, r, o, i, s, n, c, d, l) {
    this.IniciaComponente(e, t, a, r, o, i, s, n, c, d, l)
};